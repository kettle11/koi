use fermium::scancode::*;

use kapp_platform_common::{Key, Key::*};
pub fn scancode_to_key(key_in: SDL_Scancode) -> Key {
    match key_in {
        SDL_SCANCODE_0 => Digit0,
        SDL_SCANCODE_1 => Digit1,
        SDL_SCANCODE_2 => Digit2,
        SDL_SCANCODE_3 => Digit3,
        SDL_SCANCODE_4 => Digit4,
        SDL_SCANCODE_5 => Digit5,
        SDL_SCANCODE_6 => Digit6,
        SDL_SCANCODE_7 => Digit7,
        SDL_SCANCODE_8 => Digit8,
        SDL_SCANCODE_9 => Digit9,
        SDL_SCANCODE_A => A,
        SDL_SCANCODE_B => B,
        SDL_SCANCODE_C => C,
        SDL_SCANCODE_D => D,
        SDL_SCANCODE_E => E,
        SDL_SCANCODE_F => F,
        SDL_SCANCODE_G => G,
        SDL_SCANCODE_H => H,
        SDL_SCANCODE_I => I,
        SDL_SCANCODE_J => J,
        SDL_SCANCODE_K => K,
        SDL_SCANCODE_L => L,
        SDL_SCANCODE_M => M,
        SDL_SCANCODE_N => N,
        SDL_SCANCODE_O => O,
        SDL_SCANCODE_P => P,
        SDL_SCANCODE_Q => Q,
        SDL_SCANCODE_R => R,
        SDL_SCANCODE_S => S,
        SDL_SCANCODE_T => T,
        SDL_SCANCODE_U => U,
        SDL_SCANCODE_V => V,
        SDL_SCANCODE_W => W,
        SDL_SCANCODE_X => X,
        SDL_SCANCODE_Y => Y,
        SDL_SCANCODE_Z => Z,
        SDL_SCANCODE_GRAVE => Backquote,
        SDL_SCANCODE_BACKSLASH => Backslash,
        SDL_SCANCODE_COMMA => Comma,
        SDL_SCANCODE_EQUALS => Equal,
        SDL_SCANCODE_LEFTBRACKET => BracketLeft,
        SDL_SCANCODE_MINUS => Minus,
        SDL_SCANCODE_PERIOD => Period,
        SDL_SCANCODE_RIGHTBRACKET => BracketRight,
        SDL_SCANCODE_SEMICOLON => Semicolon,
        SDL_SCANCODE_SLASH => Slash,
        SDL_SCANCODE_BACKSPACE => Backspace,
        SDL_SCANCODE_CAPSLOCK => CapsLock,
        SDL_SCANCODE_DELETE => Delete,
        SDL_SCANCODE_DOWN => Down,
        SDL_SCANCODE_END => End,
        SDL_SCANCODE_RETURN => Return, // Should this be called enter?
        SDL_SCANCODE_ESCAPE => Escape,
        SDL_SCANCODE_F1 => F1,
        SDL_SCANCODE_F2 => F2,
        SDL_SCANCODE_F3 => F3,
        SDL_SCANCODE_F4 => F4,
        SDL_SCANCODE_F5 => F5,
        SDL_SCANCODE_F6 => F6,
        SDL_SCANCODE_F7 => F7,
        SDL_SCANCODE_F8 => F8,
        SDL_SCANCODE_F9 => F9,
        SDL_SCANCODE_F10 => F10,
        SDL_SCANCODE_F11 => F11,
        SDL_SCANCODE_F12 => F12,
        SDL_SCANCODE_F13 => F13,
        SDL_SCANCODE_F14 => F14,
        SDL_SCANCODE_F15 => F15,
        SDL_SCANCODE_F16 => F16,
        SDL_SCANCODE_F17 => F17,
        SDL_SCANCODE_F18 => F18,
        SDL_SCANCODE_F19 => F19,
        SDL_SCANCODE_F20 => F20,
        SDL_SCANCODE_HOME => Home,
        SDL_SCANCODE_INSERT => Insert,
        SDL_SCANCODE_LEFT => Left,
        SDL_SCANCODE_LALT => LeftAlt, // Left Alt
        SDL_SCANCODE_LCTRL => LeftControl,
        SDL_SCANCODE_LSHIFT => LeftShift,
        SDL_SCANCODE_LGUI => Meta,
        SDL_SCANCODE_MENU => Menu,
        SDL_SCANCODE_NUMLOCKCLEAR => NumLock,
        SDL_SCANCODE_PAGEDOWN => PageDown,
        SDL_SCANCODE_PAGEUP => PageUp,
        SDL_SCANCODE_RIGHT => Right,
        SDL_SCANCODE_RALT => RightAlt, // Right alt
        SDL_SCANCODE_RCTRL => RightControl,
        SDL_SCANCODE_RSHIFT => RightShift,
        SDL_SCANCODE_RGUI => Meta, // Right command key
        SDL_SCANCODE_SPACE => Space,
        SDL_SCANCODE_TAB => Tab,
        SDL_SCANCODE_UP => Up,
        SDL_SCANCODE_KP_0 => NumPad0,
        SDL_SCANCODE_KP_1 => NumPad1,
        SDL_SCANCODE_KP_2 => NumPad2,
        SDL_SCANCODE_KP_3 => NumPad3,
        SDL_SCANCODE_KP_4 => NumPad4,
        SDL_SCANCODE_KP_5 => NumPad5,
        SDL_SCANCODE_KP_6 => NumPad6,
        SDL_SCANCODE_KP_7 => NumPad7,
        SDL_SCANCODE_KP_8 => NumPad8,
        SDL_SCANCODE_KP_9 => NumPad9,
        SDL_SCANCODE_KP_PLUS => NumPadAdd,
        SDL_SCANCODE_KP_DECIMAL => NumPadDecimal,
        SDL_SCANCODE_KP_DIVIDE => NumPadDivide,
        SDL_SCANCODE_KP_ENTER => NumPadEnter,
        SDL_SCANCODE_KP_EQUALS => NumPadEquals,
        SDL_SCANCODE_KP_MULTIPLY => NumPadMultiply,
        SDL_SCANCODE_KP_MINUS => NumPadSubtract,
        _ => Key::Unknown,
    }
}
